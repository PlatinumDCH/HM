<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="b50d6fe6-5857-4686-906d-b3ab8d5e28b7" name="Changes" comment="добавил аннотацию" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Python Script" />
        <option value="HTML File" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$/.." />
  </component>
  <component name="GitHubPullRequestSearchHistory">{
  &quot;lastFilter&quot;: {
    &quot;state&quot;: &quot;OPEN&quot;,
    &quot;assignee&quot;: &quot;PlatinumDCH&quot;
  }
}</component>
  <component name="GithubPullRequestsUISettings">{
  &quot;selectedUrlAndAccountId&quot;: {
    &quot;url&quot;: &quot;https://github.com/PlatinumDCH/HM.git&quot;,
    &quot;accountId&quot;: &quot;3cae7118-e84f-4e3c-8117-99dfbad0b429&quot;
  }
}</component>
  <component name="ProjectColorInfo">{
  &quot;associatedIndex&quot;: 1
}</component>
  <component name="ProjectId" id="2pcZ34SI8SUa8ejb8cggd1gWmG6" />
  <component name="ProjectViewState">
    <option name="autoscrollToSource" value="true" />
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent"><![CDATA[{
  "keyToString": {
    "DefaultHtmlFileTemplate": "HTML File",
    "Python.config.executor": "Run",
    "RunOnceActivity.ShowReadmeOnStart": "true",
    "settings.editor.selected.configurable": "preferences.pluginManager"
  }
}]]></component>
  <component name="RunManager">
    <configuration name="config" type="PythonConfigurationType" factoryName="Python" temporary="true" nameIsGenerated="true">
      <module name="hm11" />
      <option name="ENV_FILES" value="" />
      <option name="INTERPRETER_OPTIONS" value="" />
      <option name="PARENT_ENVS" value="true" />
      <envs>
        <env name="PYTHONUNBUFFERED" value="1" />
      </envs>
      <option name="SDK_HOME" value="" />
      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$/srv/conf" />
      <option name="IS_MODULE_SDK" value="true" />
      <option name="ADD_CONTENT_ROOTS" value="true" />
      <option name="ADD_SOURCE_ROOTS" value="true" />
      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/srv/conf/config.py" />
      <option name="PARAMETERS" value="" />
      <option name="SHOW_COMMAND_LINE" value="false" />
      <option name="EMULATE_TERMINAL" value="false" />
      <option name="MODULE_MODE" value="false" />
      <option name="REDIRECT_INPUT" value="false" />
      <option name="INPUT_FILE" value="" />
      <method v="2" />
    </configuration>
    <recent_temporary>
      <list>
        <item itemvalue="Python.config" />
      </list>
    </recent_temporary>
  </component>
  <component name="SharedIndexes">
    <attachedChunks>
      <set>
        <option value="bundled-python-sdk-d7ad00fb9fc3-c546a90a8094-com.jetbrains.pycharm.community.sharedIndexes.bundled-PC-242.23726.102" />
      </set>
    </attachedChunks>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="b50d6fe6-5857-4686-906d-b3ab8d5e28b7" name="Changes" comment="" />
      <created>1733067121141</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1733067121141</updated>
    </task>
    <task id="LOCAL-00001" summary="Добавить операции CRUD и маршрутизацию для управления контактами&#10;&#10;Этот коммит вводит полную настройку для приложения управления контактами с использованием FastAPI. Он включает создание моделей базы данных, схем, функций репозитория и API маршрутов для выполнения операций CRUD над контактами. Кроме того, реализовано асинхронное управление сессиями базы данных для эффективной поддержки этих операций.">
      <option name="closed" value="true" />
      <created>1733073514331</created>
      <option name="number" value="00001" />
      <option name="presentableId" value="LOCAL-00001" />
      <option name="project" value="LOCAL" />
      <updated>1733073514331</updated>
    </task>
    <task id="LOCAL-00002" summary="Add initial Alembic migration setup&#10;&#10;Introduces Alembic configuration along with an initial migration script that creates a 'contact' table in the database. Included essential Alembic configuration files, a migration environment setup, and a lock file indicating dependencies for managing database migrations.">
      <option name="closed" value="true" />
      <created>1733133337981</created>
      <option name="number" value="00002" />
      <option name="presentableId" value="LOCAL-00002" />
      <option name="project" value="LOCAL" />
      <updated>1733133337981</updated>
    </task>
    <task id="LOCAL-00003" summary="Add logging and configuration enhancements&#10;&#10;Implemented a logging system across the application to replace print statements for better error tracking and system clarity. Added a new configuration system using an INI file to manage database connection settings, enhancing modularity and flexibility. Additionally, refactored CORS middleware configuration into a reusable function for improved code organization.">
      <option name="closed" value="true" />
      <created>1733140126517</created>
      <option name="number" value="00003" />
      <option name="presentableId" value="LOCAL-00003" />
      <option name="project" value="LOCAL" />
      <updated>1733140126517</updated>
    </task>
    <task id="LOCAL-00004" summary="импортировал необходимые библиотеки&#10;обновил модель, контакты.Добавил поля [создание и обновление записи]&#10;Связал таблицу контакты и пользователь&#10;добавил новую таблицу рефреш токен для юзера">
      <option name="closed" value="true" />
      <created>1733493150084</created>
      <option name="number" value="00004" />
      <option name="presentableId" value="LOCAL-00004" />
      <option name="project" value="LOCAL" />
      <updated>1733493150085</updated>
    </task>
    <task id="LOCAL-00005" summary="добавил роуты для signup/login/refresh token&#10;signup - new user, registration on platform&#10;login - user go to platform&#10;refresh_token - refresh tokens">
      <option name="closed" value="true" />
      <created>1733494095616</created>
      <option name="number" value="00005" />
      <option name="presentableId" value="LOCAL-00005" />
      <option name="project" value="LOCAL" />
      <updated>1733494095616</updated>
    </task>
    <task id="LOCAL-00006" summary="создал шаблоны валидации для формы регистрации Юзера&#10;создал шаблон для ответа запроса на юзера&#10;создал шаблон валидации токена">
      <option name="closed" value="true" />
      <created>1733494500179</created>
      <option name="number" value="00006" />
      <option name="presentableId" value="LOCAL-00006" />
      <option name="project" value="LOCAL" />
      <updated>1733494500179</updated>
    </task>
    <task id="LOCAL-00007" summary="присоединил роуты до точки входа приложения">
      <option name="closed" value="true" />
      <created>1733494672820</created>
      <option name="number" value="00007" />
      <option name="presentableId" value="LOCAL-00007" />
      <option name="project" value="LOCAL" />
      <updated>1733494672820</updated>
    </task>
    <task id="LOCAL-00008" summary="импорт необходимых библиотек&#10;datetime/timedelta - для определения жизненного цикла токена&#10;CryptContext - для шифрования паролей&#10;OAuth2PasswordBearer - специальный клас для аутентификации, будет запускаться как функтор">
      <option name="closed" value="true" />
      <created>1733495388204</created>
      <option name="number" value="00008" />
      <option name="presentableId" value="LOCAL-00008" />
      <option name="project" value="LOCAL" />
      <updated>1733495388204</updated>
    </task>
    <task id="LOCAL-00009" summary="создал класс аутентификации&#10;pwd_context = будет отвечать за шифр пароля&#10;соль будет спрятана в контексте">
      <option name="closed" value="true" />
      <created>1733495543116</created>
      <option name="number" value="00009" />
      <option name="presentableId" value="LOCAL-00009" />
      <option name="project" value="LOCAL" />
      <updated>1733495543116</updated>
    </task>
    <task id="LOCAL-00010" summary="сгенерировать новый секретный ключ - openssl rand -hex 32&#10;закинул его в конф файл&#10;доступен из srv/conf/config.py&#10;также закин вид алгоритма в конфигурационный файл">
      <option name="closed" value="true" />
      <created>1733496372384</created>
      <option name="number" value="00010" />
      <option name="presentableId" value="LOCAL-00010" />
      <option name="project" value="LOCAL" />
      <updated>1733496372384</updated>
    </task>
    <task id="LOCAL-00011" summary="get_pass_hash(password:srt) - используется для создания защищенного хеша пароля перед сохранением в базу данных.&#10;Процесс:&#10;1.соль ( в хеширование всегда добавляется соль-RandomData, чтобы сделать хеш уникальным даже для одинаковых паролей )&#10;2.хеширование (алгоритм bcrypt? генерирует хеш пароля, используя соль)&#10;3.возврат хеша (полеченный хеш сохраняется в базе данных)&#10;hashed_password = get_password_hash(&quot;Querty&quot;)  # Результат: строка-хеш вроде &quot;$2b$12$abcd...&quot;&#10;-------&#10;verify_password(plain_password, hashed_password)&#10;используется для проверки пароля при авторизации&#10;Процесс:&#10;1.Берет плоский пароль который пользователь ввел на сайте и хешированный пароль из бд&#10;2.Применяет тот же алгоритм хеширования, который использовался при создании хеша в бд&#10;3.Сравнивает два хеша&#10;4. возвращает true если они совпадают, и false в противном случае&#10;&#10;кратко как это работает&#10;1.регистрация пользователя&#10;пользователь вводит пароль - get_password_hash - хеш пароля - сохраняется в базу данных&#10;2. авторизация пользователя&#10;  пользователь вводит пароль - verify_pass (сравнивает хеш введеного пароля и хеше который есть в базе данных)&#10; 3. если хеши совпадают, пользователь авторизован. Иначе отказ">
      <option name="closed" value="true" />
      <created>1733498876184</created>
      <option name="number" value="00011" />
      <option name="presentableId" value="LOCAL-00011" />
      <option name="project" value="LOCAL" />
      <updated>1733498876184</updated>
    </task>
    <task id="LOCAL-00012" summary="feat: добавлена настройка аутентификации с использованием OAuth2&#10;&#10;-использован OAuth2PasswordBearer для обработки токенов доступа&#10;-добавлен endpoint для аутентификации пользователей с помощю токенов tokenUrl='api/auth/login'&#10;-это позволит пользователям вторизироватся и получать токен для дальнейших запросов&#10;&#10;feat: указывает на добавление новой функциональности&#10;есть и другие способы использовать jwt token, например передача через url">
      <option name="closed" value="true" />
      <created>1733499297685</created>
      <option name="number" value="00012" />
      <option name="presentableId" value="LOCAL-00012" />
      <option name="project" value="LOCAL" />
      <updated>1733499297685</updated>
    </task>
    <task id="LOCAL-00013" summary="feat: добавленны ассинхронные методы для работы с токенами пользователя&#10;&#10;- create_access_toke: метод для создания access токена (временный токен для авторизации)&#10;create_refresh_token: метод для генерации refresh токена (для обновления access токена)&#10;decode_refresh_token: метод для декодирования refresh токена (проверка валидности и извлечение данных)&#10;get_current_user: метод для извелечения текущего пользователя из токена">
      <option name="closed" value="true" />
      <created>1733499829600</created>
      <option name="number" value="00013" />
      <option name="presentableId" value="LOCAL-00013" />
      <option name="project" value="LOCAL" />
      <updated>1733499829600</updated>
    </task>
    <task id="LOCAL-00014" summary="improvement: добавил логику создания access токена&#10;&#10;--принимает данные data для кодирования в токен &#10;--поддерживает настройку времени жизни токена через параметр expires_delta(по умолчанию - 15 минут)&#10;--использует текущую utc временную метку&#10;---устанавливает строк действия токена expire&#10;--добавил указание токена (`scope: 'access_token'`) для дальнейшей валидации&#10;--для кодирования исп. библиотка JWT с заданным секретным ключом&#10;&#10;пример работы функции &#10;1.приходит дата &#10;data = {&#10;    &quot;user_id&quot;: 123,&#10;    &quot;username&quot;: &quot;john_doe&quot;,&#10;    &quot;roles&quot;: [&quot;admin&quot;, &quot;editor&quot;]&#10;}&#10;эти данные будут закодированы&#10;2.создаем копию словаря&#10;to_encode = data.copy()&#10;3.получаем текущее время в  UTC.&#10;4.устанавливаем время действия токена expire:if|else&#10;5.обновляем метаданные&#10;6.заново кодируем&#10;7.возвращаем новый закодированный access токен">
      <option name="closed" value="true" />
      <created>1733500828826</created>
      <option name="number" value="00014" />
      <option name="presentableId" value="LOCAL-00014" />
      <option name="project" value="LOCAL" />
      <updated>1733500828826</updated>
    </task>
    <task id="LOCAL-00015" summary="feat: реализована функция генерации refresh-токена&#10;&#10;- Основные детали реализации:&#10;  - Принимает аргументы:&#10;    - `data: dict` — словарь с пользовательскими данными для включения в токен (например, user_id, roles и т.д.).&#10;    - `expires_delta: Optional[float]` — срок действия токена в секундах (по умолчанию 7 дней).&#10;  - Рассчитывает дату истечения токена (`exp`):&#10;    - Если `expires_delta` указан, токен действует указанное время.&#10;    - Если `expires_delta` отсутствует, используется срок действия по умолчанию — 7 дней.&#10;  - Включает в токен метаинформацию:&#10;    - `iat` (issued at) — время создания токена.&#10;    - `exp` (expiration) — время истечения токена.&#10;    - `scope` — указание, что это `refresh_token`.&#10;  - Кодирует токен с использованием:&#10;    - Секретного ключа (`self.SECRET_KEY`).&#10;    - Алгоритма (`self.ALGORITHM`), например, HS256.&#10;&#10;- Возвращаемое значение:&#10;  - Закодированный JWT refresh-токен, который используется для обновления access-токенов без необходимости повторного входа.">
      <option name="closed" value="true" />
      <created>1733501143998</created>
      <option name="number" value="00015" />
      <option name="presentableId" value="LOCAL-00015" />
      <option name="project" value="LOCAL" />
      <updated>1733501143998</updated>
    </task>
    <task id="LOCAL-00016" summary="feat: добавил логику работы &#10;&#10;--принимает рефреш токен:строка - строка токена которая переданна пользователем&#10;--попытка декодировать токен с использованием&#10;(секретного ключа, указанного алгоритма, переданного в виде списка так как это универсальная фукция которая может работаь с разными алгоримами)&#10;-- проверка токен должен иметь поле scope со значением refresh_token. Если scope не соответствует-исключение&#10;-- если токен корректен, извлекается и возвращаеться поле sub (в данном случаем email пользователя)&#10;--возвращает email пользователя">
      <option name="closed" value="true" />
      <created>1733501764170</created>
      <option name="number" value="00016" />
      <option name="presentableId" value="LOCAL-00016" />
      <option name="project" value="LOCAL" />
      <updated>1733501764170</updated>
    </task>
    <task id="LOCAL-00017" summary="дописал логику получения пользователя по токену">
      <option name="closed" value="true" />
      <created>1733502157848</created>
      <option name="number" value="00017" />
      <option name="presentableId" value="LOCAL-00017" />
      <option name="project" value="LOCAL" />
      <updated>1733502157848</updated>
    </task>
    <task id="LOCAL-00018" summary="функция выполняет запрос в БД и возвращает объект пользователь из таблицы users">
      <option name="closed" value="true" />
      <created>1733502533520</created>
      <option name="number" value="00018" />
      <option name="presentableId" value="LOCAL-00018" />
      <option name="project" value="LOCAL" />
      <updated>1733502533520</updated>
    </task>
    <task id="LOCAL-00019" summary="добавил нужные импорты &#10;get_refresh_token - это экземпляр класса HTTPBearer, который использует заголовки HTTP-заголовков авторизации.&#10;Предоставляет механизм аутентификации через токены, передаваемые в заголовке Authorization запроса&#10;&#10;он ожидает что заголовок будет содержать строку в формате&#10;Authorization: Bearer &lt;token&gt;&#10;Если заголовок отсутствует или токен передан некорректно, FastAPI автоматически вернёт ответ с кодом 401 Unauthorized&#10;&#10;&#10;тип возвращаемого значения&#10;Если токен найден и валиден по формату get_refresh_token вернёт объект типа HTTPAuthorizationCredentials, содержащий &#10;scheme - схему аутентификации&#10;credentials - сам токен(строка)">
      <option name="closed" value="true" />
      <created>1733503134840</created>
      <option name="number" value="00019" />
      <option name="presentableId" value="LOCAL-00019" />
      <option name="project" value="LOCAL" />
      <updated>1733503134840</updated>
    </task>
    <task id="LOCAL-00020" summary="функция создает пользователя в бд&#10;возвращает объект new_user">
      <option name="closed" value="true" />
      <created>1733503915381</created>
      <option name="number" value="00020" />
      <option name="presentableId" value="LOCAL-00020" />
      <option name="project" value="LOCAL" />
      <updated>1733503915381</updated>
    </task>
    <task id="LOCAL-00021" summary="у пользователя обновляется refresh token &#10;оформил полную работы логина изера">
      <option name="closed" value="true" />
      <created>1733505545055</created>
      <option name="number" value="00021" />
      <option name="presentableId" value="LOCAL-00021" />
      <option name="project" value="LOCAL" />
      <updated>1733505545055</updated>
    </task>
    <task id="LOCAL-00022" summary="добавил привязку юзеров до роутов контактов">
      <option name="closed" value="true" />
      <created>1733505933175</created>
      <option name="number" value="00022" />
      <option name="presentableId" value="LOCAL-00022" />
      <option name="project" value="LOCAL" />
      <updated>1733505933175</updated>
    </task>
    <task id="LOCAL-00023" summary="добавил обновление refresh token">
      <option name="closed" value="true" />
      <created>1733508173362</created>
      <option name="number" value="00023" />
      <option name="presentableId" value="LOCAL-00023" />
      <option name="project" value="LOCAL" />
      <updated>1733508173362</updated>
    </task>
    <task id="LOCAL-00024" summary="юзеры привязаны к своим записям, без доступа у чужим">
      <option name="closed" value="true" />
      <created>1733511013674</created>
      <option name="number" value="00024" />
      <option name="presentableId" value="LOCAL-00024" />
      <option name="project" value="LOCAL" />
      <updated>1733511013674</updated>
    </task>
    <task id="LOCAL-00025" summary="попытка описать как работает jwt">
      <option name="closed" value="true" />
      <created>1733511733475</created>
      <option name="number" value="00025" />
      <option name="presentableId" value="LOCAL-00025" />
      <option name="project" value="LOCAL" />
      <updated>1733511733476</updated>
    </task>
    <task id="LOCAL-00026" summary="новый функционал: роли для юзеров&#10;&#10;--добавил поле role в таблицу юзеров&#10;--по умолчанию новому пользователю присваивается роль user&#10;--у пользователей который были до этого момента зарегистрированы это поле будет None&#10;--добавил rout вывод всех контактов для admin moderator, через декоратор dependencies=[Depends(access_to_route_all)]&#10;access_to_route_all = RoleAccess([Role.admin, Role.moderator])&#10;--создал сервис Roles&#10;--при инициализации этот клас получает все существующие типы ролей&#10;--если такой роли нету то выбрасывается исключение">
      <option name="closed" value="true" />
      <created>1733563364479</created>
      <option name="number" value="00026" />
      <option name="presentableId" value="LOCAL-00026" />
      <option name="project" value="LOCAL" />
      <updated>1733563364479</updated>
    </task>
    <task id="LOCAL-00027" summary="fix: обновил описание routes контактов">
      <option name="closed" value="true" />
      <created>1733564644905</created>
      <option name="number" value="00027" />
      <option name="presentableId" value="LOCAL-00027" />
      <option name="project" value="LOCAL" />
      <updated>1733564644905</updated>
    </task>
    <task id="LOCAL-00028" summary="обновил функцию пересоздание refresh token">
      <option name="closed" value="true" />
      <created>1733575255830</created>
      <option name="number" value="00028" />
      <option name="presentableId" value="LOCAL-00028" />
      <option name="project" value="LOCAL" />
      <updated>1733575255830</updated>
    </task>
    <task id="LOCAL-00029" summary="добавил аннотацию">
      <option name="closed" value="true" />
      <created>1733575276913</created>
      <option name="number" value="00029" />
      <option name="presentableId" value="LOCAL-00029" />
      <option name="project" value="LOCAL" />
      <updated>1733575276913</updated>
    </task>
    <option name="localTasksCounter" value="30" />
    <servers />
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="добавил роуты для signup/login/refresh token&#10;signup - new user, registration on platform&#10;login - user go to platform&#10;refresh_token - refresh tokens" />
    <MESSAGE value="создал шаблоны валидации для формы регистрации Юзера&#10;создал шаблон для ответа запроса на юзера&#10;создал шаблон валидации токена" />
    <MESSAGE value="присоединил роуты до точки входа приложения" />
    <MESSAGE value="импорт необходимых библиотек&#10;datetime/timedelta - для определения жизненного цикла токена&#10;CryptContext - для шифрования паролей&#10;OAuth2PasswordBearer - специальный клас для аутентификации, будет запускаться как функтор" />
    <MESSAGE value="создал класс аутентификации&#10;pwd_context = будет отвечать за шифр пароля&#10;соль будет спрятана в контексте" />
    <MESSAGE value="сгенерировать новый секретный ключ - openssl rand -hex 32&#10;закинул его в конф файл&#10;доступен из srv/conf/config.py&#10;также закин вид алгоритма в конфигурационный файл" />
    <MESSAGE value="get_pass_hash(password:srt) - используется для создания защищенного хеша пароля перед сохранением в базу данных.&#10;Процесс:&#10;1.соль ( в хеширование всегда добавляется соль-RandomData, чтобы сделать хеш уникальным даже для одинаковых паролей )&#10;2.хеширование (алгоритм bcrypt? генерирует хеш пароля, используя соль)&#10;3.возврат хеша (полеченный хеш сохраняется в базе данных)&#10;hashed_password = get_password_hash(&quot;Querty&quot;)  # Результат: строка-хеш вроде &quot;$2b$12$abcd...&quot;&#10;-------&#10;verify_password(plain_password, hashed_password)&#10;используется для проверки пароля при авторизации&#10;Процесс:&#10;1.Берет плоский пароль который пользователь ввел на сайте и хешированный пароль из бд&#10;2.Применяет тот же алгоритм хеширования, который использовался при создании хеша в бд&#10;3.Сравнивает два хеша&#10;4. возвращает true если они совпадают, и false в противном случае&#10;&#10;кратко как это работает&#10;1.регистрация пользователя&#10;пользователь вводит пароль - get_password_hash - хеш пароля - сохраняется в базу данных&#10;2. авторизация пользователя&#10;  пользователь вводит пароль - verify_pass (сравнивает хеш введеного пароля и хеше который есть в базе данных)&#10; 3. если хеши совпадают, пользователь авторизован. Иначе отказ" />
    <MESSAGE value="feat: добавлена настройка аутентификации с использованием OAuth2&#10;&#10;-использован OAuth2PasswordBearer для обработки токенов доступа&#10;-добавлен endpoint для аутентификации пользователей с помощю токенов tokenUrl='api/auth/login'&#10;-это позволит пользователям вторизироватся и получать токен для дальнейших запросов&#10;&#10;feat: указывает на добавление новой функциональности&#10;есть и другие способы использовать jwt token, например передача через url" />
    <MESSAGE value="feat: добавленны ассинхронные методы для работы с токенами пользователя&#10;&#10;- create_access_toke: метод для создания access токена (временный токен для авторизации)&#10;create_refresh_token: метод для генерации refresh токена (для обновления access токена)&#10;decode_refresh_token: метод для декодирования refresh токена (проверка валидности и извлечение данных)&#10;get_current_user: метод для извелечения текущего пользователя из токена" />
    <MESSAGE value="improvement: добавил логику создания access токена&#10;&#10;--принимает данные data для кодирования в токен &#10;--поддерживает настройку времени жизни токена через параметр expires_delta(по умолчанию - 15 минут)&#10;--использует текущую utc временную метку&#10;---устанавливает строк действия токена expire&#10;--добавил указание токена (`scope: 'access_token'`) для дальнейшей валидации&#10;--для кодирования исп. библиотка JWT с заданным секретным ключом&#10;&#10;пример работы функции &#10;1.приходит дата &#10;data = {&#10;    &quot;user_id&quot;: 123,&#10;    &quot;username&quot;: &quot;john_doe&quot;,&#10;    &quot;roles&quot;: [&quot;admin&quot;, &quot;editor&quot;]&#10;}&#10;эти данные будут закодированы&#10;2.создаем копию словаря&#10;to_encode = data.copy()&#10;3.получаем текущее время в  UTC.&#10;4.устанавливаем время действия токена expire:if|else&#10;5.обновляем метаданные&#10;6.заново кодируем&#10;7.возвращаем новый закодированный access токен" />
    <MESSAGE value="feat: реализована функция генерации refresh-токена&#10;&#10;- Основные детали реализации:&#10;  - Принимает аргументы:&#10;    - `data: dict` — словарь с пользовательскими данными для включения в токен (например, user_id, roles и т.д.).&#10;    - `expires_delta: Optional[float]` — срок действия токена в секундах (по умолчанию 7 дней).&#10;  - Рассчитывает дату истечения токена (`exp`):&#10;    - Если `expires_delta` указан, токен действует указанное время.&#10;    - Если `expires_delta` отсутствует, используется срок действия по умолчанию — 7 дней.&#10;  - Включает в токен метаинформацию:&#10;    - `iat` (issued at) — время создания токена.&#10;    - `exp` (expiration) — время истечения токена.&#10;    - `scope` — указание, что это `refresh_token`.&#10;  - Кодирует токен с использованием:&#10;    - Секретного ключа (`self.SECRET_KEY`).&#10;    - Алгоритма (`self.ALGORITHM`), например, HS256.&#10;&#10;- Возвращаемое значение:&#10;  - Закодированный JWT refresh-токен, который используется для обновления access-токенов без необходимости повторного входа." />
    <MESSAGE value="feat: добавил логику работы &#10;&#10;--принимает рефреш токен:строка - строка токена которая переданна пользователем&#10;--попытка декодировать токен с использованием&#10;(секретного ключа, указанного алгоритма, переданного в виде списка так как это универсальная фукция которая может работаь с разными алгоримами)&#10;-- проверка токен должен иметь поле scope со значением refresh_token. Если scope не соответствует-исключение&#10;-- если токен корректен, извлекается и возвращаеться поле sub (в данном случаем email пользователя)&#10;--возвращает email пользователя" />
    <MESSAGE value="дописал логику получения пользователя по токену" />
    <MESSAGE value="функция выполняет запрос в БД и возвращает объект пользователь из таблицы users" />
    <MESSAGE value="добавил нужные импорты &#10;get_refresh_token - это экземпляр класса HTTPBearer, который использует заголовки HTTP-заголовков авторизации.&#10;Предоставляет механизм аутентификации через токены, передаваемые в заголовке Authorization запроса&#10;&#10;он ожидает что заголовок будет содержать строку в формате&#10;Authorization: Bearer &lt;token&gt;&#10;Если заголовок отсутствует или токен передан некорректно, FastAPI автоматически вернёт ответ с кодом 401 Unauthorized&#10;&#10;&#10;тип возвращаемого значения&#10;Если токен найден и валиден по формату get_refresh_token вернёт объект типа HTTPAuthorizationCredentials, содержащий &#10;scheme - схему аутентификации&#10;credentials - сам токен(строка)" />
    <MESSAGE value="функция создает пользователя в бд&#10;возвращает объект new_user" />
    <MESSAGE value="у пользователя обновляется refresh token &#10;оформил полную работы логина изера" />
    <MESSAGE value="добавил привязку юзеров до роутов контактов" />
    <MESSAGE value="добавил обновление refresh token" />
    <MESSAGE value="юзеры привязаны к своим записям, без доступа у чужим" />
    <MESSAGE value="попытка описать как работает jwt" />
    <MESSAGE value="новый функционал: роли для юзеров&#10;&#10;--добавил поле role в таблицу юзеров&#10;--по умолчанию новому пользователю присваивается роль user&#10;--у пользователей который были до этого момента зарегистрированы это поле будет None&#10;--добавил rout вывод всех контактов для admin moderator, через декоратор dependencies=[Depends(access_to_route_all)]&#10;access_to_route_all = RoleAccess([Role.admin, Role.moderator])&#10;--создал сервис Roles&#10;--при инициализации этот клас получает все существующие типы ролей&#10;--если такой роли нету то выбрасывается исключение" />
    <MESSAGE value="fix: обновил описание routes контактов" />
    <MESSAGE value="обновил функцию пересоздание refresh token" />
    <MESSAGE value="добавил аннотацию" />
    <option name="LAST_COMMIT_MESSAGE" value="добавил аннотацию" />
  </component>
</project>