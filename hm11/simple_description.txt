JWT (JSON Web Token) - это способ передавать данные (например, информацио о пользователе) Между клиентом и серевером.

client <-> JWT TOKEN <-> server
пример токена eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c

сотоит из 3 частей, розделенными "."
1 часть Header:  
{
  "alg": "HS256", - алгоритм шифрования
  "typ": "JWT"    - тип токена
}
2 часть Pyload: - хранит данные о пользователе
{
  "user_id": XXX,
  "name": XXX,
  "iat": XXX, --время создание токена
  hash_refresh_token: XXX,
  hash_access_token: XXX,
  email: XXX
}
3 часть Signature HMACSHA256(base64url(header) + "." + base64url(payload), secret_key)
шаг1
+-------------------+
|  Пользователь     |
|  (Вводит данные)  |
+-------------------+
        |
        v
+------------------------+  
| Система проверяет данные|
+------------------------+
        |
        v
+----------------------------+
|  Создаются токены:         |
|  - access token            |
|  - refresh token           |
+----------------------------+
        |
        v
+---------------------------+
| Сохраняются токены в БД    |
+---------------------------+
        |
        v
+---------------------------+
| Ответ пользователю:       |
| { "access_token": <...>,   |
|   "refresh_token": <...> } |
+---------------------------+
шаг2
+-------------------+
|  Пользователь     |
|  (Отправка запроса)|
+-------------------+
        |
        v
+----------------------------+
| Проверка access token      |
+----------------------------+
        |
        v
+---------------------------+
|  Ответ пользователю       |
+---------------------------+
шаг3
+-------------------+
|  Пользователь     |
|  (Отправка refresh|
|  token)           |
+-------------------+
        |
        v
+---------------------------+
| Проверка refresh token    |
+---------------------------+
        |
        v
+---------------------------+
|  Обновление токенов       |
|   (access + refresh)      |
+---------------------------+
        |
        v
+---------------------------+
| Ответ пользователю        |
| { "access_token": <...>,   |
|   "refresh_token": <...> } |
+---------------------------+


1. registration user? send email pass -> server
   проверка валидности email password
        -есть ли такой пользовател на сервере(с таким же email)
        -проверка валидности пароля
        -проверка валидность через схемы 

                class UserSchema(BaseModel): -как какие данные пользователь будет вводить(валидация данных)
                    username:str = Field(min_length=3, max_length=40)
                    email: EmailStr
                    password:str = Field(min_length=6, max_length=8)

                class UserResponse(BaseModel): - то какой ответ при запросе пользователя получишь
                    id:int
                    username:str
                    email:EmailStr
                    class Config:
                        form_attributes: True
    сама функция записи пользователя в бд
        -------[1]
        async def get_user_by_email(email:str, db:AsyncSession=Depends(get_db))->Optional[User]:
            user_query = select(User).filter_by(email=email) - проверка по email
            user = await db.execute(user_query)
            user = user.scalar_one_or_none()
            return user
        -------
        -------
        async def create_user(body:UserSchema, db:AsyncSession=Depends(get_db))->User: -функция создание нового пользователя
            avatar:Optional[str] = None
            try:
                g = Gravatar(body.email)
                avatar = g.get_image()
            except Exception as err:
                logger.error(err) -ошибка при вытскивании аватарки с сервиса Gravatar
            new_user = User(**body.model_dump(), avatar=avatar)
            db.add(new_user)
            await db.commit()
            await db.refresh(new_user)
            return new_user
        _______
        @router.post('/signup', response_model=UserResponse, status_code=status.HTTP_201_CREATED) -- POST отравить данные на сервер для создания нового ресурса
        async def signup(body: UserSchema, db:AsyncSession=Depends(get_db)):
            exists_user = await repository_users.get_user_by_email[1](body.email, db)  #проверка на то что такого пользователя нету в БД
            if exists_user:
                raise HTTPException(status_code=status.HTTP_409_CONFLICT,detail='Account already exists')
            body.password = auth_service.get_pass_hash(body.password) --из тела ответа мы молучаем поля username,email,password(UserSchema), берем поле password и хешируем его     
            new_user = await repository_users.create_user(body, db) --создаем нового пользователя
            return new_user -> retun User
        --------
        после всего этого в бд появлися новый пользователь с такими полями
        class User(Base):
            __tablename__ = 'users'
            id: Mapped[int]          = mapped_column(primary_key=True) - автоматически создался ID
            username: Mapped[str]    = mapped_column(String(50)) - пренесли username из UserSchema
            email: Mapped[str]       = mapped_column(String(150), nullable=False, unique=True) - пенесли email из UserSchema, поле должно быть уникальным так у нас идет выборка из БД по email
            password: Mapped[str]    = mapped_column(String(255), nullable=False) -переносим password который прошйл валидацию из UserSchema, пароль так же был захеширован
            avatar: Mapped[str]      = mapped_column(String(255), nullable=True)  -если у пользователя был аватар то url этого аватара был занесен в БД
            created_at: Mapped[date] = mapped_column('created_at', DateTime, default=func.now()) -автоматическое создание времени занесение пользователя в БД
            updated_at: Mapped[date] = mapped_column('updated_at', DateTime, default=func.now(),onupdate=func.now()) - дублирования времени создания                                    
            role: Mapped[Enum] = mapped_column('role', Enum(Role), default=Role.user, nullable=True) -автоматически присвоилась роль user, разрешено пустое поле так как возможно обьекты уже есть
2. Вход в систему
        ------
        class TokenSchema(BaseModel):
            access_token:str
            refresh_token:str
            token_type:str = 'bearer'
        ------
        ------
        *OAuth2PasswordRequestForm?
         это специальный клас который используеться для обработки данных формы отправленные через запрос application/x-www-form-urlencoded
        *что содержиться в body:OAuth2PasswordRequestForm=Depends() - благодаря Depends() автоматически извлекает данные из запроса
            grant_type - строка, представляющая тип предоставления токена (по умолчанию "password")
            username - строка введенная пользователем в данном случае это email
            password - строка введенна пользователем (пароль)
            scope - список строк для указания областей доступа (по умолчанию пустой список)
            client_id - ID клиента (если предоставляется)
            client_secret -  секрет клиента (если предоставляется)
        ------
        ------[2]
        async def create_access_token(self, data:dict, expires_delta:Optional[float]=None)->str: - в качестве data мы получили email пользователя
            to_encode:dict = data.copy() - копируем словарь {'sub': user.email}
            utc_now:datetime = datetime.now(pytz.UTC) - текущее время
            if expires_delta: - если указана другая дата жизни токена то применяем ее
                expire:datetime = utc_now + timedelta(seconds=expires_delta)
            else:
                expire:datetime = utc_now + timedelta(minutes=15) - если не указана то по умолчанию это 15 минут
            to_encode.update
                        (
                            {
                                'iat': datetime.now(pytz.UTC),  - время создание токена
                                'exp': expire,  - сколько времени ему осталось 
                                'scope': 'access_token' - в словаре явно указываем что это именно access_token
                            }
                        )  
            encoded_assess_token:str = jwt.encode(to_encode, self.SECRET_KEY, algorithm=self.ALGORITHM) - формируется assess токен 
            [data{'sub': user.email}+{
                                'iat': datetime.now(pytz.UTC),  - время создание токена
                                'exp': expire,  - сколько времени ему осталось 
                                'scope': 'access_token' - в словаре явно указываем что это именно access_token
                            } = HASHaccess token]
            return encoded_assess_token
        ------
        ------[3]
            async def create_refresh_token(self, data:dict, expires_delta:Optional[float]=None)->str: - в качестве data получаем email пользователя
                to_encode:dict = data.copy() - копируем словарь
                utc_now:datetime = datetime.now(pytz.UTC) - текущее время
                if expires_delta: - если указана другое вреся жизни токена указываем его
                    expire:datetime = utc_now + timedelta(seconds=expires_delta)
                else:
                    expire:datetime = utc_now + timedelta(days=7) - по дефолту это 7 дней 
                to_encode.update(
                                {
                                    'iat': datetime.now(pytz.UTC),  - время создание токена
                                    'exp': expire,  - до какого момента он будет действительным
                                    'scope': 'refresh_token' - явное укащание что это refresh токен
                                }
                                ) 
                encoded_refresh_token:str = jwt.encode(to_encode, self.SECRET_KEY, self.ALGORITHM) - кодируем наш улучшенный словарь, используя секретный ключ и алгортим
                 [data{'sub': user.email}+{
                                'iat': datetime.now(pytz.UTC),  - время создание токена
                                'exp': expire,  - сколько времени ему осталось 
                                'scope': 'access_token' - в словаре явно указываем что это именно access_token
                            } = HASHrefresh token][4]    
                return encoded_refresh_token
        ------
        ------
        async def update_token(user:User, token:str|None, db:AsyncSession):
            try: --проверка, существует ли токен дли данного пользователя
                user_query = select(UserToken).filter_by(user_id = user.id) -делаем запрос в связанную таблицу и пытаемся найти refresh token user используя id user
                result = await db.execute(user_query) - ассинхронно выполняем запрос
                user_token = result.scalar_one_or_none() - пытаемся получить токен из запроса
                if user_token: - если токен существует то обновляем токен
                    user_query = (update(UserToken).where(UserToken.user_id == user.id).values(refresh_token=token)) - оформляем запрос на обновление рефреш токена
                    await db.execute(user_query) - выполняем запрос обновление токена
                else: - в случаем если мы не нашли рефреш токена по данному юзеру
                    new_token = UserToken(user_id=user.id, refresh_token=token) - оформляем запрос на нового пользователя
                    db.add(new_token) - выполняем запрос
                    await db.commit() - ассинхронно фиксируем изменения
            except Exception as err:
                await db.rollback() - в случае ошибки откатываем все изменения которы могли быть в БД
                logger.error(f"Failed to update user's token: {err}")
                raise err

        @router.post('/login', response_model=TokenSchema) - POST отравить данные на сервер для создания нового ресурса
        async def login(body: OAuth2PasswordRequestForm=Depends(), db:AsyncSession=Depends(get_db)): - получаем данные через форму {username:actaual input user email, pass:input user pass}
            user = await repository_users.get_user_by_email[1](body.username, db) - в данном случаем body.username это user:email, получаем обьект user из базы данных
            if user is None:
                raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail='invalid email')
            if not auth_service.verify_pass(body.password, user.password):
                raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail='Invalid pass') - похорошому ножно прописывать только ошибку без описания, в чем именно проблема 
            new_access_token = await auth_service.create_access_token(data={'sub': user.email}) - [2]создание нового access токена
            new_refresh_token = await auth_service.create_refresh_token(data={'sub': user.email}) - [3]создание нового refresh токена
            await repository_users.update_token(user, new_refresh_token, db) - обновлем рефреш токен юзера или создаем его если он первый раз зашел после ргистрации на сайте
            return {'access_token': new_access_token, 'refresh_token':new_refresh_token, 'token_type':'bearer'}
       [пользователь прислал форму, 
        с помощю OAuth2PasswordRequestForm=Depends() вытаскиваем всю нужную информацию из запроса,
        получаем обьект из бд если мы его нашли по почте, в идеале от там должен быть так как прошел регистрацию,
        создаем новую пару токенов,
        отправляем новую пару токенов]
        |-----Visual------|
                [application/x-www-form-urlencoded]
                    {
                    grant_type :"password"
                    username : input from user email <---+
                    password : input forom user password |
                    scope : []                           |
                    client_id : None                     |
                    client_secret : None                 |
                    }                                    |
                [get object user from db. for searsh use X]
                    user = {
                            id: XXX,
                            username: XXX,
                            email:XXX,
                            password: hashXXX,
                            avatar: strXXX,
                            created_at: datatimeXXX
                            updated_at: datatimeXXX
                            role: user
                            }
                [create token access:str hashXXX, create token refresh:str hashXXX]
                    decoded refresh token  {                             decoded access token {
                                    'iat': datetime.now(pytz.UTC),                  'iat': datetime.now(pytz.UTC),
                                    'exp': expire,                                  'exp': expire,
                                    'scope': 'refresh_token'                        'scope': 'access_token'
                                }                                                  }
                [update refresh token spetial for user. У нас есть специальная связанная таблица в которой храняться рефреш токены юзеров
                    мы или добавляем в пустое поле только что созданный рефреш токен, или обновляем уже существующий <update_token(user, new_refresh_token, db)>]
                [return {'access_token': HASHnew_access_token, 'refresh_token':HASHnew_refresh_token, 'token_type':'bearer'}]

3. Обновление refresh token
    -----
    get_refresh_token = HTTPBearer() - используеться для извлечение токена из заголовка Authorization < Authorization: Bearer <token> >
    -----
    -----
    async def decode_refresh_token(self, refresh_token:str):
        try:
            payload = jwt.decode(refresh_token, self.SECRET_KEY, algorithms=[self.ALGORITHM]) - декодируем токен который ми получили через get_refresh_token
            if payload['scope'] == 'refresh_token': - проверка что это именно рефреш токен, изначально при создании мы в словаре явно указывали что это рефреш токен
                email = payload['sub'] - вытаскиеваем email [4]
                return email
            raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail='Invalid scope for token') - если не смогли раскодировать или, исключение
        except JWTError:
            raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail='Could not validate credentials')

    @router.get('/refresh_token',response_model=TokenSchema)
        async def refresh_token(credentials:HTTPAuthorizationCredentials=Security(get_refresh_token),db:AsyncSession=Depends(get_db)):               
            token = credentials.credentials --токен извлекается из запроса - разбивает запрос на части < Authorization: Bearer <token> and credentials = "<token>" >
            email = await auth_service.decode_refresh_token(token) #декодируем refresh token, получаем email
            user = await repository_users.get_user_by_email(email, db) - получаем объект из таблицы users
            user_token_query = await db.execute(select(UserToken).filter_by(user_id=user.id)) -создание запроса на получение рефреш токена конретного пользователя                 
            user_refresh_token = user_token_query.scalar_one_or_none() - выполенение запроса
            try:
                if not user_refresh_token or user_refresh_token != token: если токен пытались подделать или поля для токена пустое в БД
                    logger.warning(f"Invalid refresh token for user: {user.email}")
                    raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail='Invalid refresh token')
            except Exception as e:
                logger.error(f"Error processing refresh token for user: {email} - {str(e)}")
                raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="Internal server error")
            *у user по идее должен быть refresh token после логина на сайте
            new_access_token = await auth_service.create_access_token(data={'sub': user.email}) - создание нового токена
            new_refresh_token = await auth_service.create_refresh_token(data={'sub':user.email}) - создание нового токена
            await repository_users.update_token(user, new_refresh_token,db) - обновлеям рефреш токен в конерктного user
            return {'access_token': new_access_token,'refresh_token':new_refresh_token,'token_type':'bearer'} возвращаем новую пару токенов к который вшиты метаданные пользователя <email>
    
